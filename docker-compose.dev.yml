services:
  # MariaDB Database
  database:
    image: mariadb:11.8.3
    container_name: warehouse-db-dev
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: warehouse
      MYSQL_USER: warehouse
      MYSQL_PASSWORD: warehousepassword
    ports:
      - "3306:3306"
    volumes:
      - db_data_dev:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./database/healthcheck.sh:/usr/local/bin/healthcheck.sh:ro
    networks:
      - warehouse-network
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3

  # Backend API (Development with hot reload)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: warehouse-api-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      DB_HOST: database
      DB_PORT: 3306
      DB_USERNAME: warehouse
      DB_PASSWORD: warehousepassword
      DB_DATABASE: warehouse
    ports:
      - "3000:3000"
    volumes:
      - ./backend/src:/app/src
      - ./backend/package.json:/app/package.json
      - ./backend/tsconfig.json:/app/tsconfig.json
    depends_on:
      database:
        condition: service_healthy
    networks:
      - warehouse-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application (Development with hot reload)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: warehouse-app-dev
    restart: unless-stopped
    ports:
      - "4200:4200"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/angular.json:/app/angular.json
      - ./frontend/package.json:/app/package.json
      - ./frontend/tsconfig.json:/app/tsconfig.json
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - warehouse-network

volumes:
  db_data_dev:

networks:
  warehouse-network:
    driver: bridge
